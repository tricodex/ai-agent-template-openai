// src/index.ts

import { Request, Response, route } from './httpSupport'
import OpenAI from 'openai'
import { z } from 'zod'
import { zodResponseFormat } from 'openai/helpers/zod'

const AssessmentResult = z.object({
  isValid: z.boolean(),
  reason: z.string(),
})

const systemPrompt = `You are a service validity assessor for a decentralized AI Fiverr-like platform. Your task is to evaluate digital services based on provided requirements. Here are the general requirements:

1. The content must be original and not plagiarized.
2. The content must be free of grammatical and spelling errors.
3. The content must be coherent and well-structured.
4. The content must be relevant to the specified topic or service.

Assess the provided content against both these general requirements and the specific requirements provided by the service requirer. If all requirements are met, return a positive assessment. If not, explain why the content fails to meet the requirements.`

async function GET(req: Request): Promise<Response> {
  const secrets = req.secret || {}
  const queries = req.queries
  const openaiApiKey = (secrets.openaiApiKey) ? secrets.openaiApiKey as string : ''
  const openai = new OpenAI({ apiKey: openaiApiKey })

  const specificRequirements = queries.requirements ? queries.requirements[0] : ''
  const content = queries.content ? queries.content[0] : ''

  if (!specificRequirements || !content) {
    return new Response(JSON.stringify({ error: 'Missing requirements or content' }), { status: 400 })
  }

  try {
    const completion = await openai.beta.chat.completions.parse({
      model: "gpt-4o-mini", //"gpt-4o-2024-08-06",
      response_format: zodResponseFormat(AssessmentResult, "assessment"),
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: `Specific requirements: ${specificRequirements}\n\nContent to assess: ${content}` }
      ],
    })

    const assessment = completion.choices[0].message.parsed
    
    // Check if assessment is not null before accessing its properties
    const isValid = assessment ? assessment.isValid : false;
    const reason = assessment ? assessment.reason : '';
    
    // Prepare the result for attestation
    const attestationResult = {
      isValid,
      reason,
      timestamp: new Date().toISOString(),
      contentHash: await sha256(content),
    }

    return new Response(JSON.stringify(attestationResult))
  } catch (error) {
    console.error('Error assessing content:', error)
    return new Response(JSON.stringify({ error: 'Internal Server Error' }), { status: 500 })
  }
}

async function sha256(message: string) {
  // Use the Web Crypto API to generate a hash
  const msgBuffer = new TextEncoder().encode(message)
  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer)
  const hashArray = Array.from(new Uint8Array(hashBuffer))
  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('')
  return hashHex
}

async function POST(req: Request): Promise<Response> {
    return new Response(JSON.stringify({message: 'POST method not implemented'}), { status: 501 })
  }
  

export default async function main(request: string) {
    return await route({ GET, POST }, request)
  }